storage:
  files:
    - filesystem: "root"
      path:       "/etc/kubernetes/cni/docker_opts_cni.env"
      mode:       0644
      contents:
        inline: |
          DOCKER_OPT_BIP=""
          DOCKER_OPT_IPMASQ=""
    - filesystem: "root"
      path:       "/etc/kubernetes/cni/net.d/10-flannel.conf"
      mode:       0644
      contents:
        inline: |
          {
              "name": "podnet",
              "type": "flannel",
              "delegate": {
                  "isDefaultGateway": true
              }
          }
    - filesystem: "root"
      path:       "/etc/kubernetes/ssl/cert_generator.sh"
      mode:       0700
      contents:
        inline: |
          #!/bin/bash
          # Creating TLS certs
          cd /etc/kubernetes/ssl
          master_Ip=PRIVATE_IPV4
          cat >openssl.cnf<<EOF
          [req]
          req_extensions = v3_req
          distinguished_name = req_distinguished_name
          [req_distinguished_name]
          [ v3_req ]
          basicConstraints = CA:FALSE
          keyUsage = nonRepudiation, digitalSignature, keyEncipherment
          subjectAltName = @alt_names
          [alt_names]
          DNS.1 = kubernetes
          DNS.2 = kubernetes.default
          DNS.3 = kubernetes.default.svc
          DNS.4 = kubernetes.default.svc.cluster.local
          IP.1 = 10.3.0.1
          IP.2 = $master_Ip
          EOF
          openssl genrsa -out apiserver-key.pem 2048
          openssl req -new -key apiserver-key.pem -out apiserver.csr -subj "/CN=kube-apiserver/O=system:masters" -config openssl.cnf
          openssl x509 -req -in apiserver.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out apiserver.pem -days 365 -extensions v3_req -extfile openssl.cnf
          echo "DONE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    - filesystem: "root"
      path:       "/etc/kubernetes/ssl/ca.pem"
      mode:       0644
      contents:
        inline: |
          {{ ca.pem }}
    - filesystem: "root"
      path:       "/etc/kubernetes/ssl/ca-key.pem"
      mode:       0644
      contents:
        inline: |
          {{ ca-key.pem }}
    - filesystem: "root"
      path:       "/etc/systemd/system/kubelet.service"
      mode:       0644
      contents:
        inline: |
          [Service]
          Environment=KUBELET_IMAGE_TAG=KUBELET_VERSION
          Environment="RKT_RUN_ARGS=--uuid-file-save=/var/run/kubelet-pod.uuid \
            --volume var-log,kind=host,source=/var/log \
            --mount volume=var-log,target=/var/log \
            --volume dns,kind=host,source=/etc/resolv.conf \
            --mount volume=dns,target=/etc/resolv.conf \
            --volume modprobe,kind=host,source=/usr/sbin/modprobe \
            --mount volume=modprobe,target=/usr/sbin/modprobe \
            --volume lib-modules,kind=host,source=/lib/modules \
            --mount volume=lib-modules,target=/lib/modules \
            --uuid-file-save=/var/run/kubelet-pod.uuid"
          ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
          ExecStartPre=/usr/bin/mkdir -p /var/log/containers
          ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/run/kubelet-pod.uuid
          ExecStart=/usr/lib/coreos/kubelet-wrapper \
            --kubeconfig=/etc/kubernetes/master-kubeconfig.yaml \
            --register-schedulable=false \
            --cni-conf-dir=/etc/kubernetes/cni/net.d \
            --network-plugin=cni \
            --container-runtime=docker \
            --allow-privileged=true \
            --pod-manifest-path=/etc/kubernetes/manifests \
            --cluster_dns=10.3.0.10 \
            --cluster_domain=cluster.local \
            --feature-gates=PodPriority=true \
            --cloud-provider=aws
          ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/kubelet-pod.uuid
          Restart=always
          RestartSec=10
          [Install]
          WantedBy=multi-user.target
    - filesystem: "root"
      path:       "/etc/kubernetes/manifests/kube-apiserver.yaml"
      mode:       0644
      contents:
        inline: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: kube-apiserver
            namespace: kube-system
          spec:
            hostNetwork: true
            containers:
            - name: kube-apiserver
              image: quay.io/coreos/hyperkube:KUBELET_VERSION
              command:
              - /hyperkube
              - apiserver
              - --bind-address=0.0.0.0
              - --insecure-bind-address=0.0.0.0
              - --insecure-port=8080
              - --storage-media-type=application/json
              - --storage-backend=etcd2
              - --etcd-servers=http://PRIVATE_IPV4:2379
              - --allow-privileged=true
              - --service-cluster-ip-range=10.3.0.0/24
              - --secure-port=443
              - --advertise-address=PRIVATE_IPV4
              - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota,Priority
              - --tls-cert-file=/etc/kubernetes/ssl/apiserver.pem
              - --tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
              - --client-ca-file=/etc/kubernetes/ssl/ca.pem
              - --service-account-key-file=/etc/kubernetes/ssl/apiserver-key.pem
              - --runtime-config=extensions/v1beta1/networkpolicies=true,scheduling.k8s.io/v1alpha1=true
              - --anonymous-auth=false
              - --authorization-mode=RBAC
              - --feature-gates=PodPriority=true
              - --cloud-provider=aws
              livenessProbe:
                httpGet:
                  host: 127.0.0.1
                  port: 8080
                  path: /healthz
                initialDelaySeconds: 15
                timeoutSeconds: 15
              ports:
              - containerPort: 443
                hostPort: 443
                name: https
              - containerPort: 8080
                hostPort: 8080
                name: local
              volumeMounts:
              - mountPath: /etc/kubernetes/ssl
                name: ssl-certs-kubernetes
                readOnly: true
              - mountPath: /etc/ssl/certs
                name: ssl-certs-host
                readOnly: true
            volumes:
            - hostPath:
                path: /etc/kubernetes/ssl
              name: ssl-certs-kubernetes
            - hostPath:
                path: /usr/share/ca-certificates
              name: ssl-certs-host
    - filesystem: "root"
      path:       "/etc/kubernetes/manifests/kube-proxy.yaml"
      mode:       0644
      contents:
        inline: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: kube-proxy
            namespace: kube-system
          spec:
            hostNetwork: true
            containers:
            - name: kube-proxy
              image: quay.io/coreos/hyperkube:KUBELET_VERSION
              command:
              - /hyperkube
              - proxy
              - --master=http://127.0.0.1:8080
              - --proxy-mode=iptables
              securityContext:
                privileged: true
              volumeMounts:
              - mountPath: /etc/ssl/certs
                name: ssl-certs-host
                readOnly: true
            volumes:
            - hostPath:
                path: /usr/share/ca-certificates
              name: ssl-certs-host
    - filesystem: "root"
      path:       "/etc/kubernetes/manifests/kube-controller-manager.yaml"
      mode:       0644
      contents:
        inline: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: kube-controller-manager
            namespace: kube-system
          spec:
            hostNetwork: true
            containers:
            - name: kube-controller-manager
              image: quay.io/coreos/hyperkube:KUBELET_VERSION
              command:
              - /hyperkube
              - controller-manager
              - --master=http://127.0.0.1:8080
              - --leader-elect=true
              - --service-account-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
              - --root-ca-file=/etc/kubernetes/ssl/ca.pem
              - --cloud-provider=aws
              resources:
                requests:
                  cpu: 200m
              livenessProbe:
                httpGet:
                  host: 127.0.0.1
                  path: /healthz
                  port: 10252
                initialDelaySeconds: 15
                timeoutSeconds: 15
              volumeMounts:
              - mountPath: /etc/kubernetes/ssl
                name: ssl-certs-kubernetes
                readOnly: true
              - mountPath: /etc/ssl/certs
                name: ssl-certs-host
                readOnly: true
            volumes:
            - hostPath:
                path: /etc/kubernetes/ssl
              name: ssl-certs-kubernetes
            - hostPath:
                path: /usr/share/ca-certificates
              name: ssl-certs-host
    - filesystem: "root"
      path:       "/etc/kubernetes/manifests/kube-scheduler.yaml"
      mode:       0644
      contents:
        inline: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: kube-scheduler
            namespace: kube-system
          spec:
            hostNetwork: true
            containers:
            - name: kube-scheduler
              image: quay.io/coreos/hyperkube:KUBELET_VERSION
              command:
              - /hyperkube
              - scheduler
              - --master=http://127.0.0.1:8080
              - --leader-elect=true
              resources:
                requests:
                  cpu: 100m
              livenessProbe:
                httpGet:
                  host: 127.0.0.1
                  path: /healthz
                  port: 10251
                initialDelaySeconds: 15
                timeoutSeconds: 15
    - filesystem: "root"
      path:       "/etc/kubernetes/master-kubeconfig.yaml"
      mode:       0644
      contents:
        inline: |
          apiVersion: v1
          kind: Config
          clusters:
          - name: local
            cluster:
              server: http://127.0.0.1:8080
          users:
          - name: kubelet
          contexts:
          - context:
              cluster: local
              user: kubelet
            name: kubelet-context
          current-context: kubelet-context
etcd:
  name:                        "HOSTNAME"
  advertise_client_urls:       "http://PRIVATE_IPV4:2379"
  initial_advertise_peer_urls: "http://PRIVATE_IPV4:2380"
  listen_client_urls:          "http://0.0.0.0:2379"
  listen_peer_urls:            "http://PRIVATE_IPV4:2380"
  initial_cluster:             "HOSTNAME=http://PRIVATE_IPV4:2380"
flannel:
  interface: "PRIVATE_IPV4"
  etcd_endpoints: "http://PRIVATE_IPV4:2379"
  public_ip: "PRIVATE_IPV4"
  etcd_prefix: "/coreos.com/network"
systemd:
  units:
    - name: "etcd-member.service"
      enable: true
    - name: "flanneld.service"
      dropins:
        - name: "50-network-config.conf"
          contents: |
            [Service]
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config \
              '{ "Network": "10.2.0.0/16","Backend":{"Type":"vxlan"}}'
      enable: true
    - name: "docker.service"
      dropins:
        - name: "40-flannel.conf"
          contents: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service
            [Service]
            EnvironmentFile=/etc/kubernetes/cni/docker_opts_cni.env
      enable: true
    - name: "kubelet.service"
      dropins:
        - name: "50-cert-generator.conf"
          contents: |
            [Service]
            ExecStartPre=/etc/kubernetes/ssl/cert_generator.sh
      enable: true
