storage:
  files:
    - filesystem: "root"
      path:       "/etc/kubernetes/cni/docker_opts_cni.env"
      mode:       0644
      contents:
        inline: |
          DOCKER_OPT_BIP=""
          DOCKER_OPT_IPMASQ=""
    - filesystem: "root"
      path:       "/etc/kubernetes/cni/net.d/10-flannel.conf"
      mode:       0644
      contents:
        inline: |
          {
              "name": "podnet",
              "type": "flannel",
              "delegate": {
                  "isDefaultGateway": true
              }
          }
    - filesystem: "root"
      path:       "/etc/kubernetes/ssl/cert_generator.sh"
      mode:       0700
      contents:
        inline: |
          #!/bin/bash
          cd /etc/kubernetes/ssl
          node_Ip=PRIVATE_IPV4
          cat > worker-openssl.cnf<< EOF
          [req]
          req_extensions = v3_req
          distinguished_name = req_distinguished_name
          [req_distinguished_name]
          [ v3_req ]
          basicConstraints = CA:FALSE
          keyUsage = nonRepudiation, digitalSignature, keyEncipherment
          subjectAltName = @alt_names
          [alt_names]
          IP.1 = $node_Ip
          EOF
          openssl genrsa -out worker-key.pem 2048
          WORKER_IP=$node_Ip openssl req -new -key worker-key.pem -out worker.csr -subj "/CN=kube-node/O=system:masters" -config worker-openssl.cnf
          WORKER_IP=$node_Ip openssl x509 -req -in worker.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out worker.pem -days 365 -extensions v3_req -extfile worker-openssl.cnf
    - filesystem: "root"
      path:       "/etc/kubernetes/ssl/ca.pem"
      mode:       0644
      contents:
        inline: |
          {{ ca.pem }}
    - filesystem: "root"
      path:       "/etc/kubernetes/ssl/ca-key.pem"
      mode:       0644
      contents:
        inline: |
          {{ ca-key.pem }}
    - filesystem: "root"
      path:       "/etc/systemd/system/kubelet.service"
      mode:       0644
      contents:
        inline: |
          [Service]
          Environment=KUBELET_IMAGE_TAG=KUBELET_VERSION
          Environment="RKT_OPTS=--uuid-file-save=/var/run/kubelet-pod.uuid \
            --volume dns,kind=host,source=/etc/resolv.conf \
            --mount volume=dns,target=/etc/resolv.conf \
            --volume var-log,kind=host,source=/var/log \
            --mount volume=var-log,target=/var/log"
          ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
          ExecStartPre=/usr/bin/mkdir -p /var/log/containers
          ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/run/kubelet-pod.uuid
          ExecStart=/usr/lib/coreos/kubelet-wrapper \
            --cni-conf-dir=/etc/kubernetes/cni/net.d \
            --network-plugin=cni \
            --container-runtime=docker \
            --register-node=true \
            --allow-privileged=true \
            --pod-manifest-path=/etc/kubernetes/manifests \
            --cluster_dns=10.3.0.10 \
            --cluster_domain=cluster.local \
            --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml \
            --tls-cert-file=/etc/kubernetes/ssl/worker.pem \
            --tls-private-key-file=/etc/kubernetes/ssl/worker-key.pem \
            --feature-gates=PodPriority=true \
            --cloud-provider=aws
          ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/kubelet-pod.uuid
          Restart=always
          RestartSec=10
          [Install]
          WantedBy=multi-user.target
    - filesystem: "root"
      path:       "/etc/kubernetes/manifests/kube-proxy.yaml"
      mode:       0644
      contents:
        inline: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: kube-proxy
            namespace: kube-system
          spec:
            hostNetwork: true
            containers:
            - name: kube-proxy
              image: quay.io/coreos/hyperkube:KUBELET_VERSION
              command:
              - /hyperkube
              - proxy
              - --master=http://PRIVATE_MASTER_IPV4:8080
              - --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml
              - --proxy-mode=iptables
              securityContext:
                privileged: true
              volumeMounts:
              - mountPath: /etc/ssl/certs
                name: "ssl-certs"
              - mountPath: /etc/kubernetes/worker-kubeconfig.yaml
                name: "kubeconfig"
                readOnly: true
              - mountPath: /etc/kubernetes/ssl
                name: "etc-kube-ssl"
                readOnly: true
            volumes:
            - name: "ssl-certs"
              hostPath:
                path: "/usr/share/ca-certificates"
            - name: "kubeconfig"
              hostPath:
                path: "/etc/kubernetes/worker-kubeconfig.yaml"
            - name: "etc-kube-ssl"
              hostPath:
                path: "/etc/kubernetes/ssl"
    - filesystem: "root"
      path:       "/etc/kubernetes/worker-kubeconfig.yaml"
      mode:       0644
      contents:
        inline: |
          apiVersion: v1
          kind: Config
          clusters:
          - name: local
            cluster:
              certificate-authority: /etc/kubernetes/ssl/ca.pem
              server: https://PRIVATE_MASTER_IPV4
          users:
          - name: kubelet
            user:
              client-certificate: /etc/kubernetes/ssl/worker.pem
              client-key: /etc/kubernetes/ssl/worker-key.pem
          contexts:
          - context:
              cluster: local
              user: kubelet
            name: kubelet-context
          current-context: kubelet-context
flannel:
  interface: "PRIVATE_IPV4"
  etcd_endpoints: "http://PRIVATE_MASTER_IPV4:2379"
  public_ip: "PRIVATE_IPV4"
  etcd_prefix: "/coreos.com/network"
systemd:
  units:
    - name: "flanneld.service"
      enable: true
    - name: "docker.service"
      dropins:
        - name: "40-flannel.conf"
          contents: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service
            [Service]
            EnvironmentFile=/etc/kubernetes/cni/docker_opts_cni.env
      enable: true
    - name: "kubelet.service"
      dropins:
        - name: "50-cert-generator.conf"
          contents: |
            [Service]
            ExecStartPre=/etc/kubernetes/ssl/cert_generator.sh
      enable: true
